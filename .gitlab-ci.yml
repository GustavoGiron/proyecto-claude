stages:
  - build
  - push
  - deploy

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: "/certs"

before_script:
  - echo "$DOCKERHUB_PASSWORD" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin

build_backend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKERHUB_USERNAME/ayd2-backend:$CI_COMMIT_SHA ./backend
    - docker tag $DOCKERHUB_USERNAME/ayd2-backend:$CI_COMMIT_SHA $DOCKERHUB_USERNAME/ayd2-backend:latest
  only:
    - develop

build_frontend:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker build -t $DOCKERHUB_USERNAME/ayd2-frontend:$CI_COMMIT_SHA ./frontend
    - docker tag $DOCKERHUB_USERNAME/ayd2-frontend:$CI_COMMIT_SHA $DOCKERHUB_USERNAME/ayd2-frontend:latest
  only:
    - develop

push_backend:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push $DOCKERHUB_USERNAME/ayd2-backend:$CI_COMMIT_SHA
    - docker push $DOCKERHUB_USERNAME/ayd2-backend:latest
  needs: [build_backend]
  only:
    - develop

push_frontend:
  stage: push
  image: docker:latest
  services:
    - docker:dind
  script:
    - docker push $DOCKERHUB_USERNAME/ayd2-frontend:$CI_COMMIT_SHA
    - docker push $DOCKERHUB_USERNAME/ayd2-frontend:latest
  needs: [build_frontend]
  only:
    - develop

deploy_to_kubernetes:
  stage: deploy
  image:
    name: bitnami/kubectl:latest
    entrypoint: [""]
  script:
    - kubectl config set-cluster gke_cluster --server=$KUBE_API_SERVER --insecure-skip-tls-verify=true
    - kubectl config set-credentials deployer --token=$KUBE_TOKEN
    - kubectl config set-context default --cluster=gke_cluster --user=deployer --namespace=default
    - kubectl config use-context default
    - sed -i "s|tu_usuario_dockerhub|$DOCKERHUB_USERNAME|g" k8s/backend-deployment.yaml
    - sed -i "s|tu_usuario_dockerhub|$DOCKERHUB_USERNAME|g" k8s/frontend-deployment.yaml
    - kubectl apply -f k8s/backend-configmap.yml
    - kubectl apply -f k8s/frontend-configmap.yaml
    - kubectl apply -f k8s/backend-deployment.yaml
    - kubectl apply -f k8s/frontend-deployment.yaml
    - kubectl apply -f k8s/ingress.yml
    - kubectl rollout restart deployment/backend
    - kubectl rollout restart deployment/frontend
    - kubectl rollout status deployment/backend
    - kubectl rollout status deployment/frontend
  only:
    - develop
  needs: [push_backend, push_frontend]